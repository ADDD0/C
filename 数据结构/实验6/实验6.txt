1.求二叉树叶子数.
    (1)写一个递归算法实现计算二叉树的叶子数
        提示:先考虑边界,如果二叉树为空则返回0;如果根结点无左孩子和右孩子则返回1;否则,返回该二叉树的左子树叶子数加上右子树叶子数.
        例如:
            int sumLeaf(BiTree T) {  //求二叉树叶子数,不使用全局变量
                ......
            }

    (2)在函数(main),调用函数SumLeaf(T),并能输出结果进行验证.
        函数(main)的编制提示如下:
        int main() {
            int CountSum;
            BiTree T;

            T = CreateBiTree(T);     //参考实验五
            PreOrderTraverse(T);     //参考实验五,先序遍历二叉树
            MediumOrderTraverse(T);  //参考实验五,中序遍历二叉树
            CountSum = SumLeaf(T);   //求叶子数
            printf("The Sumleaf is:%d\n", CountSum); //输出叶子数
            return 0;
        }

2.写一个递归算法统计二叉树的度为1的结点总数,不用全局变量.

3.选做题
    (1)写一个递归算法实现计算二叉树的深度.
    (2)写一个递归算法实现统计二叉树的结点总数,不使用全局变量.