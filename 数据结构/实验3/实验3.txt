建立并输出两个递增单链表La和Lb.
    (1)首先要定义单链表的数据结构,可参考教材28页;
    (2)编写一个函数使用“头插法”或“尾插法”创建一个单链表,例如:
        LinkList CreateList(LinkList L, int n) {
            ...
        }
        上边算法可参考教材31页算法2.11,注意本算法不要求对单链表排序
    (3)编写主函数(main),调用函数CreateList(La, n)和CreateList(Lb, n)
      分别录入单链表La和Lb,注意手动录入时要保证La和Lb是递增的;
      (如果是头插法,那么录入时要按从大到小录入,如:5 4 3 2 1)
    (4)编写一个函数能够显示一个单链表中各结点的值,设La和Lb如下:
        La:1  3  7  8  15  20
        Lb:2  4  8  15  17  24  90
    (5)程序编制上的提示,仅供参考:
        #include "stdio.h"
        typedef struct LNode {
            int data;
            struct LNode *next;
        } LNode, *LinkList;

        LinkList CreateList(LinkList L, int n) {
            //使用头插法(算法2.11),创建一个含有n个结点的带头结点的单链表
            //也可以使用尾插法来创建L
            ...
            return L;
            //因为链表是动态分配内存,所以创建后头指针需返回,在调用时接收
        }

        void Show(LinkList L) {
            //能够输出带头结点的单链表L中的各个结点的值
            ...
        }

        int main() {
            LinkList La, Lb;

            La = CreateList(La, 6);  //创建带头结点单链表La,它含6个结点
            Show(La);                //输出La中各结点的值
            Lb = CreateList(Lb, 7);
            Show(Lb);
            return 0;
        }
        注:两种创建单链表的方法都分别实现,并体现在实验报告上.